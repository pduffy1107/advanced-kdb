If the current kdb system only has one HDB instance, the possibly cause for slowness could be due to two things:

1) Synchronous IPC calls: Using synchronous IPC calls makes queries far slower, especially if multiple users are using a single instance at once. When using synchronous calls, the user is expecting a response from the HDB. The HDB will create a queue for synchronous calls to respond to once it has completed their task. The client will be unavailable until the server responds with the result of the query or an error. This takes up memory and time because the HDB will only handle one task at a time.
Instead, the HDB should be edited to run asynchronous queries where possible. With asynchronous queries, the HDB will not return a result and does not wait. The HDB should send an async message back to the user once the task is finished. In this case, if there is a large query, or an error, the system will not be blocked by the user.

2) HDB Gateway: Creating a second HDB client would significantly speed up user queries. However, as a user, it is very inconvenient to have to run a single query on two HDB instances. Therefore, to maintain a single point of entry, a Gateway process for both HDBs should be created. The primary purpose of the HDB gateway is to act as a single interface. With this, users do not need to know where data is stored or make multiple requests to retrieve it. 
